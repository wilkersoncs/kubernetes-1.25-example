## Common Section ##

install                       # install a fresh system
reboot                        # reboot automatically
cdrom
text

keyboard --vckeymap=us               # keyboard layout
lang en_US.UTF-8                     # system language
timezone America/Phoenix             # system timezone

# Change these next two passwords before production
rootpw root
user --name devops --password devops --plaintext
network --bootproto=dhcp --noipv6    # enable DHPC, no IPv6
network --hostname=k8scent
selinux --disabled
firewall --disable
services --enable ssh

zerombr                              # initialize invalid partition table
ignoredisk --only-use=sda            # ignore disks except of vda
clearpart --initlabel --all          # overwrite all partitions
part /     --ondisk=sda --asprimary --fstype=ext4 --size=15000 --maxsize=200000 --grow

## Package Section ##

%packages --nobase --excludedocs
@core --nodefaults
openssh-server
rsync
sudo
%end

## Post Install Section ##

%post --log=/var/log/post-install.log
echo 'devops ALL = NOPASSWD: ALL' > /etc/sudoers.d/devops
# TODO Dont know why all gpgchecks are hanging kickstart
cat <<EOF >/etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
cat <<EOF >/etc/yum.repos.d/docker-ce.repo
[docker-ce-stable]
name=Docker CE Stable - $basearch
baseurl=https://download.docker.com/linux/centos/\$releasever/\$basearch/stable
enabled=1
gpgcheck=0
gpgkey=https://download.docker.com/linux/centos/gpg
EOF
yum update --assumeyes
yum install --assumeyes epel-release
yum repolist
#These next two lines didn't work during kickstart
#yum install -y yum-utils
#yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
# As of k8s 1.24 you must use CRI which requires containerd which comes with docker-ce
yum install --assumeyes docker-ce docker-ce-cli containerd.io docker-compose-plugin
yum install --assumeyes bridge-utils conntrack-tools jq kubelet kubeadm kubectl wget dosfstools git
echo 'net.bridge.bridge-nf-call-iptables=1' > /etc/sysctl.d/bridge.conf
systemctl enable --now docker kubelet
rm /etc/containerd/config.toml
systemctl restart containerd

#TODO Have this run as a service the first time and disable the service
cat <<EOF > /root/start-node.sh
IPADDR=`hostname -I | awk '{print $1}`
kubeadm init --apiserver-advertise-address=$IPADDR  --apiserver-cert-extra-sans=$IPADDR  --pod-network-cidr=10.10.10.0/24 --node-name `hostname` --ignore-preflight-errors Swap

export KUBECONFIG=/etc/kubernetes/admin.conf
kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
kubectl taint nodes --all node-role.kubernetes.io/control-plane-
#TODO Make this happen when all users are created
DHOME=~devops
mkdir -p $DHOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $DHOME/.kube/config
sudo chown devops:devops $DHOME/.kube/config

export KUBECONFIG=/etc/kubernetes/admin.conf
echo "export KUBECONFIG=/etc/kubernetes/admin.conf" >> /root/.bashrc
#wget https://storage.googleapis.com/golang/getgo/installer_linux
#chmod +x ./installer_linux
#./installer_linux
#source ~/.bash_profile
#git clone https://github.com/Mirantis/cri-dockerd.git
#cd cri-dockerd
#mkdir bin
#go build -o bin/cri-dockerd
#mkdir -p /usr/local/bin
#install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
#cp -a packaging/systemd/* /etc/systemd/system
#sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
#systemctl daemon-reload
#systemctl enable cri-docker.service
#systemctl enable cri-docker.socket
EOF
%end
